# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: control.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='control.proto',
  package='control',
  syntax='proto3',
  serialized_pb=_b('\n\rcontrol.proto\x12\x07\x63ontrol\"\x0c\n\nEmptyEvent\"\x19\n\tTextEvent\x12\x0c\n\x04text\x18\x01 \x01(\t\"s\n\x08KeyEvent\x12\x10\n\x08key_code\x18\x01 \x01(\x05\x12\x15\n\ris_shift_down\x18\x02 \x01(\x05\x12\x14\n\x0cis_ctrl_down\x18\x03 \x01(\x05\x12\x13\n\x0bis_alt_down\x18\x04 \x01(\x05\x12\x13\n\x0bis_key_down\x18\x05 \x01(\x08\"\x1b\n\nImageReply\x12\r\n\x05image\x18\x01 \x01(\x0c\"\x18\n\x05Reply\x12\x0f\n\x07message\x18\x01 \x01(\t2\xfa\x01\n\x07\x43ontrol\x12\x35\n\x0ehandleKeyEvent\x12\x11.control.KeyEvent\x1a\x0e.control.Reply\"\x00\x12\x41\n\x13handleImageGetEvent\x12\x13.control.EmptyEvent\x1a\x13.control.ImageReply\"\x00\x12:\n\x12handleSayTextEvent\x12\x12.control.TextEvent\x1a\x0e.control.Reply\"\x00\x12\x39\n\x10handleResetEvent\x12\x13.control.EmptyEvent\x1a\x0e.control.Reply\"\x00\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_EMPTYEVENT = _descriptor.Descriptor(
  name='EmptyEvent',
  full_name='control.EmptyEvent',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=26,
  serialized_end=38,
)


_TEXTEVENT = _descriptor.Descriptor(
  name='TextEvent',
  full_name='control.TextEvent',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='text', full_name='control.TextEvent.text', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=40,
  serialized_end=65,
)


_KEYEVENT = _descriptor.Descriptor(
  name='KeyEvent',
  full_name='control.KeyEvent',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key_code', full_name='control.KeyEvent.key_code', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='is_shift_down', full_name='control.KeyEvent.is_shift_down', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='is_ctrl_down', full_name='control.KeyEvent.is_ctrl_down', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='is_alt_down', full_name='control.KeyEvent.is_alt_down', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='is_key_down', full_name='control.KeyEvent.is_key_down', index=4,
      number=5, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=67,
  serialized_end=182,
)


_IMAGEREPLY = _descriptor.Descriptor(
  name='ImageReply',
  full_name='control.ImageReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='image', full_name='control.ImageReply.image', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=184,
  serialized_end=211,
)


_REPLY = _descriptor.Descriptor(
  name='Reply',
  full_name='control.Reply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='message', full_name='control.Reply.message', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=213,
  serialized_end=237,
)

DESCRIPTOR.message_types_by_name['EmptyEvent'] = _EMPTYEVENT
DESCRIPTOR.message_types_by_name['TextEvent'] = _TEXTEVENT
DESCRIPTOR.message_types_by_name['KeyEvent'] = _KEYEVENT
DESCRIPTOR.message_types_by_name['ImageReply'] = _IMAGEREPLY
DESCRIPTOR.message_types_by_name['Reply'] = _REPLY

EmptyEvent = _reflection.GeneratedProtocolMessageType('EmptyEvent', (_message.Message,), dict(
  DESCRIPTOR = _EMPTYEVENT,
  __module__ = 'control_pb2'
  # @@protoc_insertion_point(class_scope:control.EmptyEvent)
  ))
_sym_db.RegisterMessage(EmptyEvent)

TextEvent = _reflection.GeneratedProtocolMessageType('TextEvent', (_message.Message,), dict(
  DESCRIPTOR = _TEXTEVENT,
  __module__ = 'control_pb2'
  # @@protoc_insertion_point(class_scope:control.TextEvent)
  ))
_sym_db.RegisterMessage(TextEvent)

KeyEvent = _reflection.GeneratedProtocolMessageType('KeyEvent', (_message.Message,), dict(
  DESCRIPTOR = _KEYEVENT,
  __module__ = 'control_pb2'
  # @@protoc_insertion_point(class_scope:control.KeyEvent)
  ))
_sym_db.RegisterMessage(KeyEvent)

ImageReply = _reflection.GeneratedProtocolMessageType('ImageReply', (_message.Message,), dict(
  DESCRIPTOR = _IMAGEREPLY,
  __module__ = 'control_pb2'
  # @@protoc_insertion_point(class_scope:control.ImageReply)
  ))
_sym_db.RegisterMessage(ImageReply)

Reply = _reflection.GeneratedProtocolMessageType('Reply', (_message.Message,), dict(
  DESCRIPTOR = _REPLY,
  __module__ = 'control_pb2'
  # @@protoc_insertion_point(class_scope:control.Reply)
  ))
_sym_db.RegisterMessage(Reply)


import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class ControlStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.handleKeyEvent = channel.unary_unary(
        '/control.Control/handleKeyEvent',
        request_serializer=KeyEvent.SerializeToString,
        response_deserializer=Reply.FromString,
        )
    self.handleImageGetEvent = channel.unary_unary(
        '/control.Control/handleImageGetEvent',
        request_serializer=EmptyEvent.SerializeToString,
        response_deserializer=ImageReply.FromString,
        )
    self.handleSayTextEvent = channel.unary_unary(
        '/control.Control/handleSayTextEvent',
        request_serializer=TextEvent.SerializeToString,
        response_deserializer=Reply.FromString,
        )
    self.handleResetEvent = channel.unary_unary(
        '/control.Control/handleResetEvent',
        request_serializer=EmptyEvent.SerializeToString,
        response_deserializer=Reply.FromString,
        )


class ControlServicer(object):

  def handleKeyEvent(self, request, context):
    """Sends a greeting
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def handleImageGetEvent(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def handleSayTextEvent(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def handleResetEvent(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ControlServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'handleKeyEvent': grpc.unary_unary_rpc_method_handler(
          servicer.handleKeyEvent,
          request_deserializer=KeyEvent.FromString,
          response_serializer=Reply.SerializeToString,
      ),
      'handleImageGetEvent': grpc.unary_unary_rpc_method_handler(
          servicer.handleImageGetEvent,
          request_deserializer=EmptyEvent.FromString,
          response_serializer=ImageReply.SerializeToString,
      ),
      'handleSayTextEvent': grpc.unary_unary_rpc_method_handler(
          servicer.handleSayTextEvent,
          request_deserializer=TextEvent.FromString,
          response_serializer=Reply.SerializeToString,
      ),
      'handleResetEvent': grpc.unary_unary_rpc_method_handler(
          servicer.handleResetEvent,
          request_deserializer=EmptyEvent.FromString,
          response_serializer=Reply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'control.Control', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaControlServicer(object):
  """The Beta API is deprecated for 0.15.0 and later.

  It is recommended to use the GA API (classes and functions in this
  file not marked beta) for all further purposes. This class was generated
  only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
  def handleKeyEvent(self, request, context):
    """Sends a greeting
    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def handleImageGetEvent(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def handleSayTextEvent(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def handleResetEvent(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaControlStub(object):
  """The Beta API is deprecated for 0.15.0 and later.

  It is recommended to use the GA API (classes and functions in this
  file not marked beta) for all further purposes. This class was generated
  only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
  def handleKeyEvent(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    """Sends a greeting
    """
    raise NotImplementedError()
  handleKeyEvent.future = None
  def handleImageGetEvent(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  handleImageGetEvent.future = None
  def handleSayTextEvent(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  handleSayTextEvent.future = None
  def handleResetEvent(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  handleResetEvent.future = None


def beta_create_Control_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  """The Beta API is deprecated for 0.15.0 and later.

  It is recommended to use the GA API (classes and functions in this
  file not marked beta) for all further purposes. This function was
  generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
  request_deserializers = {
    ('control.Control', 'handleImageGetEvent'): EmptyEvent.FromString,
    ('control.Control', 'handleKeyEvent'): KeyEvent.FromString,
    ('control.Control', 'handleResetEvent'): EmptyEvent.FromString,
    ('control.Control', 'handleSayTextEvent'): TextEvent.FromString,
  }
  response_serializers = {
    ('control.Control', 'handleImageGetEvent'): ImageReply.SerializeToString,
    ('control.Control', 'handleKeyEvent'): Reply.SerializeToString,
    ('control.Control', 'handleResetEvent'): Reply.SerializeToString,
    ('control.Control', 'handleSayTextEvent'): Reply.SerializeToString,
  }
  method_implementations = {
    ('control.Control', 'handleImageGetEvent'): face_utilities.unary_unary_inline(servicer.handleImageGetEvent),
    ('control.Control', 'handleKeyEvent'): face_utilities.unary_unary_inline(servicer.handleKeyEvent),
    ('control.Control', 'handleResetEvent'): face_utilities.unary_unary_inline(servicer.handleResetEvent),
    ('control.Control', 'handleSayTextEvent'): face_utilities.unary_unary_inline(servicer.handleSayTextEvent),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_Control_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  """The Beta API is deprecated for 0.15.0 and later.

  It is recommended to use the GA API (classes and functions in this
  file not marked beta) for all further purposes. This function was
  generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
  request_serializers = {
    ('control.Control', 'handleImageGetEvent'): EmptyEvent.SerializeToString,
    ('control.Control', 'handleKeyEvent'): KeyEvent.SerializeToString,
    ('control.Control', 'handleResetEvent'): EmptyEvent.SerializeToString,
    ('control.Control', 'handleSayTextEvent'): TextEvent.SerializeToString,
  }
  response_deserializers = {
    ('control.Control', 'handleImageGetEvent'): ImageReply.FromString,
    ('control.Control', 'handleKeyEvent'): Reply.FromString,
    ('control.Control', 'handleResetEvent'): Reply.FromString,
    ('control.Control', 'handleSayTextEvent'): Reply.FromString,
  }
  cardinalities = {
    'handleImageGetEvent': cardinality.Cardinality.UNARY_UNARY,
    'handleKeyEvent': cardinality.Cardinality.UNARY_UNARY,
    'handleResetEvent': cardinality.Cardinality.UNARY_UNARY,
    'handleSayTextEvent': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'control.Control', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
